import streamlit as st
import torch
import torch.nn.functional as F
import numpy as np
from PIL import Image
import cv2
import os
import sys
import warnings

warnings.filterwarnings("ignore")

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

# –ò–º–ø–æ—Ä—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π TextureAware –º–æ–¥–µ–ª–∏
try:
    from texture_aware_model import TextureAwareClassifier, get_improved_transforms
    MODEL_AVAILABLE = True
    print("‚úÖ Improved TextureAware model loaded successfully")
except Exception as e:
    print(f"‚ùå Failed to load improved model: {e}")
    MODEL_AVAILABLE = False

class ImprovedCarConditionClassifier:
    """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é (94.4% —Ç–æ—á–Ω–æ—Å—Ç–∏)"""
    
    def __init__(self, model_path="../models/improved_texture_best_model.pth"):
        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        
        # –ö–ª–∞—Å—Å—ã
        self.cleanliness_classes = ['–ß–∏—Å—Ç—ã–π', '–°–ª–µ–≥–∫–∞ –≥—Ä—è–∑–Ω—ã–π', '–ì—Ä—è–∑–Ω—ã–π', '–û—á–µ–Ω—å –≥—Ä—è–∑–Ω—ã–π']
        self.damage_classes = ['–ù–µ–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π', '–ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è', '–°–µ—Ä—å–µ–∑–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è']
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        self.combined_categories = {
            (0, 0): "üü¢ –ß–∏—Å—Ç—ã–π –∏ —Ü–µ–ª—ã–π",
            (0, 1): "üü° –ß–∏—Å—Ç—ã–π, –Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π", 
            (0, 2): "üî¥ –ß–∏—Å—Ç—ã–π, —Å–µ—Ä—å–µ–∑–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π",
            (1, 0): "üü† –°–ª–µ–≥–∫–∞ –≥—Ä—è–∑–Ω—ã–π, –Ω–æ —Ü–µ–ª—ã–π",
            (1, 1): "üü† –°–ª–µ–≥–∫–∞ –≥—Ä—è–∑–Ω—ã–π –∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π",
            (1, 2): "üî¥ –°–ª–µ–≥–∫–∞ –≥—Ä—è–∑–Ω—ã–π, —Å–µ—Ä—å–µ–∑–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π",
            (2, 0): "üü§ –ì—Ä—è–∑–Ω—ã–π, –Ω–æ —Ü–µ–ª—ã–π",
            (2, 1): "üü§ –ì—Ä—è–∑–Ω—ã–π –∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π",
            (2, 2): "üî¥ –ì—Ä—è–∑–Ω—ã–π, —Å–µ—Ä—å–µ–∑–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π",
            (3, 0): "‚ö´ –û—á–µ–Ω—å –≥—Ä—è–∑–Ω—ã–π, –Ω–æ —Ü–µ–ª—ã–π",
            (3, 1): "‚ö´ –û—á–µ–Ω—å –≥—Ä—è–∑–Ω—ã–π –∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π", 
            (3, 2): "üî¥ –û—á–µ–Ω—å –≥—Ä—è–∑–Ω—ã–π, —Å–µ—Ä—å–µ–∑–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π"
        }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        self.model = self._load_model(model_path)
        
        # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
        transforms_dict = get_improved_transforms()
        self.transform = transforms_dict['val']
    
    def _load_model(self, model_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        if not os.path.exists(model_path):
            st.error(f"–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
            return None
        
        model = TextureAwareClassifier()
        checkpoint = torch.load(model_path, map_location=self.device, weights_only=False)
        model.load_state_dict(checkpoint['model_state_dict'])
        model.to(self.device)
        model.eval()
        
        return model
    
    def analyze_car_condition(self, image):
        """–ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        if self.model is None:
            return self._fallback_analysis(image)
        
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if isinstance(image, np.ndarray):
                image = Image.fromarray(image)
            if image.mode != 'RGB':
                image = image.convert('RGB')
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
            image_array = np.array(image)
            transformed = self.transform(image=image_array)
            image_tensor = transformed['image'].unsqueeze(0).to(self.device)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            with torch.no_grad():
                outputs = self.model(image_tensor)
                
                # Softmax –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
                clean_probs = torch.softmax(outputs['cleanliness'], dim=1)[0]
                damage_probs = torch.softmax(outputs['damage'], dim=1)[0]
                
                # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã
                clean_pred = torch.argmax(clean_probs).item()
                damage_pred = torch.argmax(damage_probs).item()
                
                # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                clean_conf = clean_probs[clean_pred].item()
                damage_conf = damage_probs[damage_pred].item()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            return {
                'cleanliness': {
                    'prediction': self.cleanliness_classes[clean_pred],
                    'confidence': clean_conf,
                    'probabilities': {cls: prob.item() for cls, prob in zip(self.cleanliness_classes, clean_probs)}
                },
                'damage': {
                    'prediction': self.damage_classes[damage_pred], 
                    'confidence': damage_conf,
                    'probabilities': {cls: prob.item() for cls, prob in zip(self.damage_classes, damage_probs)}
                },
                'overall_condition': self.combined_categories.get((clean_pred, damage_pred), "‚ùì –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
            }
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
            return self._fallback_analysis(image)
    
    def _fallback_analysis(self, image):
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–æ–∫"""
        return {
            'cleanliness': {
                'prediction': '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ',
                'confidence': 0.0,
                'probabilities': {}
            },
            'damage': {
                'prediction': '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ', 
                'confidence': 0.0,
                'probabilities': {}
            },
            'overall_condition': "üîç –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
        }

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∞–¥–∞–ø—Ç–µ—Ä–∞ –º–æ–¥–µ–ª–∏
model_adapter = None


@st.cache_resource
def load_model(model_path: str = None):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–π ML –º–æ–¥–µ–ª–∏ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    global model_adapter
    try:
        if not MODEL_AVAILABLE:
            st.warning("‚ö†Ô∏è Model not available. Using demo mode.")
            return None, None, None
            
        print("ü§ñ Loading hybrid ML model...")
        model_adapter = HybridModelAdapter()
        
        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        print(f"‚úÖ Hybrid ML model loaded successfully on {device}")
        
        return model_adapter, None, device
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")
        print(f"‚ùå Model loading error: {e}")
        return None, None, None


def predict_image(model_adapter, image, transform, device):
    """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏."""
    try:
        if model_adapter is None or not MODEL_AVAILABLE:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            return {
                'cleanliness': {
                    'prediction': '–ß–∏—Å—Ç—ã–π',
                    'confidence': 0.85,
                    'probabilities': {'–ß–∏—Å—Ç—ã–π': 0.85, '–ì—Ä—è–∑–Ω—ã–π': 0.15}
                },
                'damage': {
                    'prediction': '–¶–µ–ª—ã–π',
                    'confidence': 0.92,
                    'probabilities': {'–¶–µ–ª—ã–π': 0.92, '–ë–∏—Ç—ã–π': 0.08}
                }
            }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—É—é ML –º–æ–¥–µ–ª—å
        hybrid_results = model_adapter.predict(image)
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        results = {
            'cleanliness': {
                'prediction': hybrid_results['simplified']['–ß–∏—Å—Ç–æ—Ç–∞'],
                'confidence': hybrid_results['probabilities']['cleanliness']['clean'] if hybrid_results['simplified']['–ß–∏—Å—Ç–æ—Ç–∞'] == '–ß–∏—Å—Ç—ã–π' else hybrid_results['probabilities']['cleanliness']['dirty'],
                'probabilities': {
                    '–ß–∏—Å—Ç—ã–π': hybrid_results['probabilities']['cleanliness']['clean'],
                    '–ì—Ä—è–∑–Ω—ã–π': hybrid_results['probabilities']['cleanliness']['dirty']
                }
            },
            'damage': {
                'prediction': hybrid_results['simplified']['–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è'],
                'confidence': hybrid_results['probabilities']['damage']['intact'] if hybrid_results['simplified']['–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è'] == '–¶–µ–ª—ã–π' else hybrid_results['probabilities']['damage']['damaged'],
                'probabilities': {
                    '–¶–µ–ª—ã–π': hybrid_results['probabilities']['damage']['intact'],
                    '–ü–æ–≤—Ä–µ–∂–¥–µ–Ω': hybrid_results['probabilities']['damage']['damaged']
                }
            }
        }
        
        return results
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None


def display_results_improved(results):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É–ª—É—á—à–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏."""
    if results is None:
        st.error("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–∏—Å—Ç–æ—Ç—ã
    cleanliness = results.get('cleanliness', {})
    damage = results.get('damage', {})
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üßΩ –ß–∏—Å—Ç–æ—Ç–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
        prediction = cleanliness.get('prediction', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        confidence = cleanliness.get('confidence', 0)
        
        color = "green" if prediction in ["–ß–∏—Å—Ç—ã–π"] else "orange"
        st.markdown(f"<h3 style='color: {color}'>{prediction}</h3>", unsafe_allow_html=True)
        st.write(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2%}")
        
        probabilities = cleanliness.get('probabilities', {})
        for label, prob in probabilities.items():
            st.write(f"{label}: {prob:.2%}")
            st.progress(prob)
    
    with col2:
        st.subheader("üîß –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è")
        prediction = damage.get('prediction', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        confidence = damage.get('confidence', 0)
        
        color = "green" if prediction in ["–¶–µ–ª—ã–π", "–ù–µ–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π"] else "red"
        st.markdown(f"<h3 style='color: {color}'>{prediction}</h3>", unsafe_allow_html=True)
        st.write(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2%}")
        
        probabilities = damage.get('probabilities', {})
        for label, prob in probabilities.items():
            st.write(f"{label}: {prob:.2%}")
            st.progress(prob)


def display_results(results):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è."""
    if results is None:
        return
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üßπ –ß–∏—Å—Ç–æ—Ç–∞")
        
        cleanliness = results['cleanliness']
        prediction = cleanliness['prediction']
        confidence = cleanliness['confidence']
        
        # –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        color = "green" if prediction == "–ß–∏—Å—Ç—ã–π" else "orange"
        st.markdown(f"<h3 style='color: {color}'>{prediction}</h3>", unsafe_allow_html=True)
        st.write(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2%}")
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã –¥–ª—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        for label, prob in cleanliness['probabilities'].items():
            st.write(f"{label}: {prob:.2%}")
            st.progress(prob)
    
    with col2:
        st.subheader("üîß –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å")
        
        damage = results['damage']
        prediction = damage['prediction']
        confidence = damage['confidence']
        
        # –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        color = "green" if prediction == "–¶–µ–ª—ã–π" else "red"
        st.markdown(f"<h3 style='color: {color}'>{prediction}</h3>", unsafe_allow_html=True)
        st.write(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2%}")
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã –¥–ª—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        for label, prob in damage['probabilities'].items():
            st.write(f"{label}: {prob:.2%}")
            st.progress(prob)


def get_overall_assessment(results):
    """–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è."""
    if results is None:
        return None
    
    cleanliness_pred = results.get('cleanliness', {}).get('prediction', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')
    damage_pred = results.get('damage', {}).get('prediction', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')
    
    if cleanliness_pred == "–ß–∏—Å—Ç—ã–π" and damage_pred in ["–¶–µ–ª—ã–π", "–ù–µ–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π"]:
        return "‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "green"
    elif cleanliness_pred == "–ì—Ä—è–∑–Ω—ã–π" and damage_pred in ["–¶–µ–ª—ã–π", "–ù–µ–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π"]:
        return "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –º–æ–π–∫–∏", "orange"
    elif cleanliness_pred == "–ß–∏—Å—Ç—ã–π" and damage_pred == "–ë–∏—Ç—ã–π":
        return "üîß –¢—Ä–µ–±—É–µ—Ç —Ä–µ–º–æ–Ω—Ç–∞", "red"
    else:
        return "‚ùå –ü–ª–æ—Ö–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "red"


def main():
    st.set_page_config(
        page_title="–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
        page_icon="üöó",
        layout="wide"
    )
    
    st.title("üöó –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è inDrive")
    st.markdown("---")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    with st.sidebar:
        st.header("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
        st.write("""
        –≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:
        
        - **–ß–∏—Å—Ç–æ—Ç–∞**: —á–∏—Å—Ç—ã–π –∏–ª–∏ –≥—Ä—è–∑–Ω—ã–π
        - **–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å**: –±–∏—Ç—ã–π –∏–ª–∏ —Ü–µ–ª—ã–π
        
        –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
        """)
    
        
        st.header("üéØ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ")
        st.write("""
        - –ü–æ–≤—ã—à–µ–Ω–∏–µ –¥–æ–≤–µ—Ä–∏—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
        - –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ —Å–µ—Ä–≤–∏—Å–∞
        - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫
        - Safety-—Å–∏–≥–Ω–∞–ª—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        """)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    st.header("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
        type=['png', 'jpg', 'jpeg'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: PNG, JPG, JPEG"
    )


    
    col1, col2, col3, col4 = st.columns(4)
    
 
    selected_example = None
    

    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if uploaded_file is not None or selected_example:
        
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–π TextureAware –º–æ–¥–µ–ª–∏ (94.4% —Ç–æ—á–Ω–æ—Å—Ç–∏)..."):
            if not MODEL_AVAILABLE:
                st.error("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.")
                return
            
            classifier = ImprovedCarConditionClassifier()
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if uploaded_file is not None:
                image = Image.open(uploaded_file).convert('RGB')
            else:
                # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                image = Image.new('RGB', (400, 300), color='lightblue')
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            col1, col2, col3 = st.columns([1, 2, 1])
            
            with col2:
                st.image(image, caption="–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)
            
            # –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            with st.spinner("–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é..."):  
                results = classifier.analyze_car_condition(image)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            st.markdown("---")
            st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
            
            # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
            assessment, color = get_overall_assessment(results)
            st.markdown(f"<h2 style='text-align: center; color: {color}'>{assessment}</h2>", 
                       unsafe_allow_html=True)
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            display_results_improved(results)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            st.markdown("---")
            st.header("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            
            cleanliness_pred = results.get('cleanliness', {}).get('prediction', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')
            damage_pred = results.get('damage', {}).get('prediction', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')
            
            recommendations = []
            
            if cleanliness_pred == "–ì—Ä—è–∑–Ω—ã–π":
                recommendations.append("üßΩ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–º—ã—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø–µ—Ä–µ–¥ –ø–æ–µ–∑–¥–∫–æ–π")
            
            if damage_pred in ["–ë–∏—Ç—ã–π", "–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π"]:
                recommendations.append("üîß –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π")
                recommendations.append("‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")
            
            if not recommendations:
                recommendations.append("‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ–µ–∑–¥–∫–∏")
            
            for rec in recommendations:
                st.write(rec)
            
            with st.expander("üîç –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
                tech_info = {
                    "–ú–æ–¥–µ–ª—å": "TextureAware ML Car Classifier v2.0" if MODEL_AVAILABLE else "Demo Mode",
                    "–¢–æ—á–Ω–æ—Å—Ç—å": "94.4% –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö" if MODEL_AVAILABLE else "N/A",
                    "–†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è": "224x224",
                    "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ": "CUDA" if torch.cuda.is_available() else "CPU",
                    "–ê–ª–≥–æ—Ä–∏—Ç–º": "Attention + Focused Learning" if MODEL_AVAILABLE else "Demo",
                    "–°—Ç–∞—Ç—É—Å": "üéØ –£–ª—É—á—à–µ–Ω–Ω–∞—è TextureAware –º–æ–¥–µ–ª—å - —Ä–µ—à–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ –≥—Ä—è–∑—å/–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è!" if MODEL_AVAILABLE else "Demo",
                    "–ó–∞–¥–∞—á–∏": ["–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —á–∏—Å—Ç–æ—Ç—ã", "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π"],
                    "–ö–ª–∞—Å—Å—ã —á–∏—Å—Ç–æ—Ç—ã": ["–ß–∏—Å—Ç—ã–π", "–°–ª–µ–≥–∫–∞ –≥—Ä—è–∑–Ω—ã–π", "–ì—Ä—è–∑–Ω—ã–π", "–û—á–µ–Ω—å –≥—Ä—è–∑–Ω—ã–π"],
                    "–ö–ª–∞—Å—Å—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π": ["–¶–µ–ª—ã–π", "–°–ª–µ–≥–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω", "–°–∏–ª—å–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω"]
                }
                st.json(tech_info)
        
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    
    else:
        st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    
    # –§—É—Ç–µ—Ä
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center'>
        <p>üöó Car Condition Classifier –¥–ª—è inDrive | –°–æ–∑–¥–∞–Ω–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–µ—Ä–≤–∏—Å–∞</p>
        <p><em>‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è</em></p>
        <p><strong>üéØ –£—Å–ø–µ—Ö:</strong> –ì–∏–±—Ä–∏–¥–Ω–∞—è ML –º–æ–¥–µ–ª—å —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é 100% –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!</p>
    </div>
    """, unsafe_allow_html=True)


if __name__ == '__main__':
    main()